[project]
name = "openai-to-claude"
version = "0.1.0"
description = "OpenAI to Anthropic API 兼容代理服务"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "Dev Team", email = "dev@example.com" }
]
keywords = ["anthropic", "openai", "api", "proxy", "fastapi"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers", 
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]

dependencies = [
    "fastapi>=0.104.1,<0.105.0",
    "uvicorn[standard]>=0.24.0,<0.25.0",
    "httpx>=0.25.0,<0.26.0",
    "pydantic>=2.5.0,<3.0.0",
    "pydantic-settings>=2.1.0,<3.0.0",
    "python-multipart>=0.0.6",
    "uvloop>=0.19.0,<0.20.0",
    "orjson>=3.9.0,<4.0.0",
    "loguru>=0.7.0,<1.0.0",
    "tenacity>=8.2.0,<9.0.0",
    "aiofiles>=23.2.0,<24.0.0",
    "pytest>=7.4.4",
    "pytest-asyncio>=0.23.8",
    "tiktoken>=0.7.0,<1.0.0",
    "watchdog>=3.0.0,<4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "httpx>=0.25.0,<0.26.0",  # 用于测试
    "mypy>=1.7.0,<2.0.0",
    "ruff>=0.2.0,<1.0.0",
    "black>=23.11.0,<24.0.0",
]

[project.urls]
Homepage = "https://github.com/example/openai-to-claude"
Repository = "https://github.com/example/openai-to-claude"
Issues = "https://github.com/example/openai-to-claude/issues"

[tool.uv]
package = true

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.sdist]
packages = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["."]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html", 
    "--cov-report=xml",
    "-v",
    "--strict-markers",
]
asyncio_mode = "auto"
markers = [
    "integration: mark test as integration test requiring mock server",
    "streaming: mark test as streaming response test",
    "timeout: mark test as timeout or error handling test",
    "slow: mark test as slow running",
    "e2e: mark test as end-to-end integration test"
]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "B017"]

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[dependency-groups]
dev = [
    "requests>=2.32.4",
]
